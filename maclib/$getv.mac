.*
.*
.*  This program and the accompanying materials are
.*
.*  made available under the terms of the Eclipse Public License v2.0 which accompanies
.*
.*  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html
.*
.*  
.*
.*  SPDX-License-Identifier: EPL-2.0
.*
.*  
.*
.*  Copyright Contributors to the Zowe Project.
.*
.*
.**********************************************************************
.* Macro: $GETV
.*
.* Description:
.*   Internal macro used to generate the code to get a data value or
.*   more commonly an address into a specific register
.*
.* Usage:
.*   $GETV FROM=fulword,INTO=(R1)     ->  LA   R1,FULWORD
.*   $GETV FROM=(*,fulword),INTO=(R1) ->  L    R1,FULWORD
.*
.**********************************************************************
         MACRO
&LABEL   $GETV &FROM=,                 Get value from here             >
               &INTO=,                 Put value into here             >
               &DEBUG=NO               Debug setting
.*
         LCLA  &I,&N                   -- Work Num(s) --
         LCLA  &FL                     FROM var length
         LCLA  &IL                     INTO var length
         LCLC  &C,&TMP                 -- Work Char(s)
         LCLC  &GPR(3)                 General purpose reg prefix(s)
         LCLC  &FR                     FROM area pointer (reg)
         LCLC  &FT                     FROM var type
         LCLC  &FV                     FROM var value
         LCLC  &IR                     INTO area pointer (reg)
         LCLC  &IT                     INTO var type
         LCLC  &IV                     INTO var value
         LCLC  &M                      Message prefix
         LCLC  &P(2)                   Parm name & value for error msg
         LCLC  &OP                     Operation/Instruction
&M       SETC  '$GETV -'               Set error msg prefix
.*
&P(1)    SETC  'FROM','&FROM'
         AIF   ('&FROM' EQ '').MERR010
&P(1)    SETC  'INTO','&INTO'
         AIF   ('&INTO' EQ '').MERR010
.*
&FL      SETA  K'&FROM
&FN      SETA  N'&FROM
&IL      SETA  K'&INTO
&IN      SETA  N'&INTO
&GPR(1)  SETC  '','R','REG'
&IR      SETC  '1'
&IT      SETC  T'&INTO
&FR      SETC  '14'
&FT      SETC  T'&FROM
.**********************************************************************
.* Validate INTO type (this must be a register)
.**********************************************************************
.LBL1000 ANOP  ,
         AIF   ('&DEBUG' NE 'YES').LBL1002
         MNOTE 0,'&M @:LBL1000'
         MNOTE 0,'&M INTO=&INTO : Type=&IT, Len=&IL, N=&IN'
.LBL1002 ANOP  ,
&P(1)    SETC  'INTO','&INTO'
         AIF   (&IN GT 1).MERR020
&IV      SETC  '&INTO(1)'
         AIF   ('&INTO'(1,1) EQ '(').LBL1010
         AIF   ('&IT' EQ 'U').LBL1100
         AGO   .LBL1200
.*
.***     Ensure INTO=var is a GPR (0-15, R0-R15 or REG0-REG15)
.*
.LBL1010 ANOP  ,
&I       SETA  0
.LBL1020 ANOP  ,
&N       SETA  0
&I       SETA  &I+1
.LBL1030 ANOP  ,
&C       SETC  '&GPR(&I)&N'
         AIF   ('&DEBUG' NE 'YES').LBL1032
         MNOTE 0,'&M @:LBL1030 IV=&IV C=&C'
.LBL1032 ANOP  ,
         AIF   ('&IV' EQ '&C').LBL2000
&N       SETA  &N+1
         AIF   (&N LT 16).LBL1030
         AIF   (&I LT N'&GPR).LBL1020
         AGO   .MERR020
.*
.***     Process an unknown type
.*
.LBL1100 ANOP  ,
         AIF   ('&DEBUG' NE 'YES').LBL1102
         MNOTE 0,'&M @:LBL1100 - Unknown type'
.LBL1102 ANOP  ,
         AGO   .MERR040
.*
.***     Process a known type
.*
.LBL1200 ANOP  ,
         AIF   ('&DEBUG' NE 'YES').LBL1202
         MNOTE 0,'&M @:LBL1200 - Known type'
.LBL1202 ANOP  ,
         AGO   .MERR040
.**********************************************************************
.* Determine FROM type
.**********************************************************************
.LBL2000 ANOP  ,
         AIF   ('&DEBUG' NE 'YES').LBL2002
         MNOTE 0,'&M @:LBL2000'
         MNOTE 0,'&M FROM=&FROM : Type=&FT, Len=&FL, N=&FN'
.LBL2002 ANOP  ,
&P(1)    SETC  'FROM','&FROM'
         AIF   (&FN GT 1).LBL2100
&FV      SETC  '&FROM(1)'
         AIF   ('&FROM'(1,1) EQ '(').LBL2010  Register notation?
         AIF   ('&FT' EQ 'U').LBL2200
         AGO   .LBL2300
.*
.***     Check to see if FROM= is a valid register
.*
.LBL2010 ANOP  ,
&I       SETA  0
.LBL2020 ANOP  ,
&N       SETA  0
&I       SETA  &I+1
.LBL2030 ANOP  ,
&C       SETC  '&GPR(&I)&N'
         AIF   ('&DEBUG' NE 'YES').LBL2032
         MNOTE 0,'&M @:LBL2030 FV=&FV C=&C'
.LBL2032 ANOP  ,
         AIF   ('&FV' EQ '&C').LBL2040
&N       SETA  &N+1
         AIF   (&N LT 16).LBL2030
         AIF   (&I LT N'&GPR).LBL2020
         AGO   .MERR020
         MEXIT ,
.*
.***     Process where 'FROM=(register-notation)'
.*
.LBL2040 ANOP  ,
         LR    &IV,&FV
         MEXIT ,
.*
.***     Process where 'FROM=(*,value)' i.e. RX-Type addr
.*
.LBL2100 ANOP  ,
         AIF   ('&DEBUG' NE 'YES').LBL2102
         MNOTE 0,'&M @:LBL2100 - FROM=RX-type'
.LBL2102 ANOP  ,
         AIF   (&FN GT 2).MERR030
&FV      SETC  '&FROM(2)'
         AIF   ('&FROM'(1,3) NE '(*,').MERR030
         L     &IV,&FV
         MEXIT ,
.*
.***     Process where 'FROM=an unknown type'
.*
.LBL2200 ANOP  ,
         AIF   ('&DEBUG' NE 'YES').LBL2202
         MNOTE 0,'&M @:LBL2200 - FROM=Unknown type'
.LBL2202 ANOP  ,
         LA    &IV,&FV
         MEXIT ,
.*
.***     Process where 'FROM=a known type'
.*
.LBL2300 ANOP  ,
         AIF   ('&DEBUG' NE 'YES').LBL2302
         MNOTE 0,'&M @:LBL2300 - FROM=Known type'
.LBL2302 ANOP  ,
         LA    &IV,&FV
         MEXIT ,
.**********************************************************************
.* Macro error messages
.**********************************************************************
.MERR010 MNOTE 8,'&M Required parm=&P(1) value=&P(2) is invalid'
         MEXIT ,
.MERR020 MNOTE 8,'&M &P(1)=&P(2) must specify a register in the format >
               (0-15), (R0-R15) or (REG0-REG15)'
         MEXIT ,
.MERR030 MNOTE 8,'&M FROM=&FROM is invalid, to generate a load for an i>
               ndirect addr use the form FROM=(*,label)'
         MEXIT ,
.MERR040 MNOTE 8,'&M &P(1)=&P(2) is an unsupported variable type'
.MEND    MEND
